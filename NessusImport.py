# Copyright (C) Saltworks Security, LLC - All Rights Reserved
# Unauthorized copying of this file, via any medium is strictly prohibited
# Proprietary and confidential
# Written by Saltworks Security, LLC (www.saltworks.io) , 2024

import json
import datetime
import sys 
from dateutil.parser import parse as dtParse
from SMIssueDocs import SMIssueDocs
import xmltodict
from bs4 import BeautifulSoup

class NessusImport(object):
    def __init__(self, filePath):
        self.filePath = filePath
        splitFileName = self.filePath.rsplit('/', -1)
        self.finalFileName = splitFileName[-1].rsplit('.')
        self.helpers = NessusImportHelpers(self)
        self.SMIssueDocs = SMIssueDocs()
        self.fileJson = []
        self.issueImportDocs = []


    def issueImport(self):
        self.helpers.formatFile()
        jsonD = json.loads(self.fileJson)

        for hostProperty in jsonD['NessusClientData_v2']['Report']['ReportHost']['HostProperties']['tag']:
            if hostProperty['@name'] == 'HOST_END':
                parsed_date = datetime.datetime.strptime(hostProperty['#text'], "%a %b %d %H:%M:%S %Y")
                foundDate = parsed_date.strftime("%Y-%m-%dT%H:%M:%S.%f")
                #convertFoundDate 
            elif hostProperty['@name'] == 'host-ip':
                assetIp = hostProperty['#text']
            elif hostProperty['@name'] == 'host-fqdn':
                assetName = hostProperty['#text']

        for reportItem in jsonD['NessusClientData_v2']['Report']['ReportHost']['ReportItem']:
            standardIssueDoc = self.SMIssueDocs.smStandardIssueDoc()
            standardIssueDoc['asset']['name'] = assetName
            standardIssueDoc['asset']['ip'] = assetIp
            standardIssueDoc['asset']['port'] = int(reportItem['@port'])
            standardIssueDoc['asset']['version'] = 'latest'
            standardIssueDoc['asset']['versionId'] = f'Nessus:{foundDate}'
            standardIssueDoc['issue']['foundDate']= foundDate
            standardIssueDoc['issue']['reportId']= f'Nessus:{foundDate}'
            if reportItem['risk_factor'] == 'None':

                standardIssueDoc['issue']['severity'] = 'Info'
            else:
                standardIssueDoc['issue']['severity'] = reportItem['risk_factor']
            standardIssueDoc['issue']['testStatus'] = 'Found'
            standardIssueDoc['issue']['name'] = reportItem['@pluginName']
            standardIssueDoc['issue']['vendor'] = 'Nessus'
            standardIssueDoc['issue']['product'] = 'Nessus'
            standardIssueDoc['issue']['location'] = f"{assetName}:{reportItem['@port']}"
            standardIssueDoc['issue']['locationFull'] = f"{assetName}:{reportItem['@port']}"
            standardIssueDoc['issue']['details'] = reportItem['description']
            standardIssueDoc['issue']['implication'] = reportItem['synopsis']
            standardIssueDoc['issue']['recommendation'] = reportItem['solution']
            if 'see_also' in reportItem.keys():
                standardIssueDoc['issue']['reference'] = reportItem['see_also']
            standardIssueDoc['issue']['category'] = [reportItem['@pluginFamily']]
            self.issueImportDocs.append(standardIssueDoc)

            
            
        with open('test2.json', 'w') as file:
            data = json.dumps(self.issueImportDocs, indent=2)
            file.write(data)
        

        return self.issueImportDocs


class NessusImportHelpers(object):
    def __init__(self, NessusImport) -> None:
        self.nessusImport = NessusImport

    def formatFile(self, isTemplate= False):
        with open(self.nessusImport.filePath, 'r') as file:
            data = file.read()
            fileDict =xmltodict.parse(data)

            self.nessusImport.fileJson = json.dumps(fileDict, indent=4)

    
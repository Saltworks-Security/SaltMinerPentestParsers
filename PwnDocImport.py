# Copyright (C) Saltworks Security, LLC - All Rights Reserved
# Unauthorized copying of this file, via any medium is strictly prohibited
# Proprietary and confidential
# Written by Saltworks Security, LLC (www.saltworks.io) , 2024

import json
from datetime import datetime
from SMIssueDocs import SMIssueDocs
from bs4 import BeautifulSoup
from dateutil.parser import parse as dtParse

class PwnDocImport(object):
    def __init__(self, filePath, isTemplate= False) -> None:
        self.isTemplate = isTemplate
        self.filePath = filePath
        self.dateTimeNow = datetime.now()
        self.formattedDateNow = self.dateTimeNow.strftime("%Y-%m-%dT%I:%M:%S.000000")
        splitFileName = self.filePath.rsplit('/', -1)
        self.finalFileName = splitFileName[-1].rsplit('.')
        self.issueImportDocs = []
        self.severityTypes = {"0":"Info","1":"Low", "2":"Low", "3":"Medium", "4":"High","5":"Critical"}
        self.templateImporter = PwnDocTemplateImport(self)
        self.helpers = PwnDocHelpers(self)
        self.SMIssueDocs = SMIssueDocs()
        self.fileJson = []
        
    def issueImport(self):
        if self.isTemplate:
            self.templateImporter.templateImport()

        else:
            self.docImport()
        return self.issueImportDocs
    
    def docImport(self):
        self.helpers.formatFile() 




class PwnDocTemplateImport(PwnDocImport):
    def __init__(self, PwnDocImport) -> None:
        
        self.helpers = PwnDocHelpers(PwnDocImport)
        self.issueImportDocs = PwnDocImport

    def templateImport(self):
        self.helpers.formatFile(isTemplate=True)
        for templateIssue in self.issueImportDocs.fileJson:
            standardIssueDoc = self.issueImportDocs.SMIssueDocs.smStandardIssueDoc()
            standardIssueDoc['issue']['name']= templateIssue['details'][0]['title']
            standardIssueDoc['issue']['category']= [templateIssue['category']] 
            standardIssueDoc['issue']['details']= BeautifulSoup(templateIssue['details'][0]['description'], 'html5lib').get_text()
            standardIssueDoc['issue']['proof']= BeautifulSoup(templateIssue['details'][0]['description'], 'html5lib').get_text()
            if len(templateIssue['details'][0]['references']) > 0:
                standardIssueDoc['issue']['reference']= templateIssue['details'][0]['references'][0]
            standardIssueDoc['issue']['references']= ''
            
            for reference in templateIssue['details'][0]['references']:
                standardIssueDoc['issue']['references'] = (reference+ ', '+standardIssueDoc['issue']['references'])
            standardIssueDoc['issue']['references'] = standardIssueDoc['issue']['references'][:-2]
            standardIssueDoc['issue']['testStatus']= 'Found'
            standardIssueDoc['issue']['location']='https://saltminer.io'
            standardIssueDoc['issue']['locationFull']= 'https://saltminer.io'
            standardIssueDoc['issue']['foundDate']= self.issueImportDocs.formattedDateNow
            standardIssueDoc['issue']['implication']= BeautifulSoup(templateIssue['details'][0]['observation'], 'html5lib').get_text()
            standardIssueDoc['issue']['recommendation']= BeautifulSoup(templateIssue['details'][0]['remediation'], 'html5lib').get_text()
            standardIssueDoc['issue']['vendor']= 'pwndoc'
            standardIssueDoc['issue']['product']= 'pwndoc'
            standardIssueDoc['issue']['reportId']= f'pwndoc-{self.issueImportDocs.formattedDateNow}'
            standardIssueDoc['issue']['severity'] = 'Info'
            self.helpers.appendIssue(standardIssueDoc)
        



class PwnDocHelpers(PwnDocImport):
    def __init__(self, PwnDocImport) -> None:
        self.pwnDocImport = PwnDocImport

    def formatFile(self, isTemplate= False):
        with open(self.pwnDocImport.filePath) as file:
            data = json.load(file)
            self.pwnDocImport.fileJson = data

    def appendIssue(self, template):
        self.pwnDocImport.issueImportDocs.append(template)

 
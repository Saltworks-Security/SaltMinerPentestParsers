# Copyright (C) Saltworks Security, LLC - All Rights Reserved
# Unauthorized copying of this file, via any medium is strictly prohibited
# Proprietary and confidential
# Written by Saltworks Security, LLC (www.saltworks.io) , 2024


import datetime
from BurpImport import BurpImport
from NessusImport import NessusImport
from NmapImport import NmapImport
from PwnDocImport import PwnDocImport
from VeraCode import VeraCodeImport
from write import writeIssue
from customParser import customParser

dt= datetime


class issueImportReader:
    def __init__(self, vendor, filePath, endpath):
        self.filePath= filePath
        self.endpath = endpath
        splitFileName = self.filePath.rsplit('/', -1)
        self.finalFileName = splitFileName[-1].rsplit('.')
        self.vendor = vendor.lower()
        self.vendorClass = self.vendorClassSelector()

    def importStart(self):
        
        if self.vendor[:9] == '-template':
            isTemplate = True
        else:
            isTemplate = False

        issueImportDocs = self.vendorClass.issueImport() 
        parser = customParser(issueImportDocs, isTemplate=isTemplate)
        parsedIssues = parser.parseIssues()
        writer = writeIssue(parsedIssues, self.finalFileName[0], endpath=self.endpath)
        writer.writeIssue() 


    def vendorClassSelector(self):
       
        if self.vendor =='burp':
            return BurpImport(self.filePath) 
        if self.vendor =='nmap':
            return NmapImport(self.filePath) 
        if self.vendor =='veracode':
            return VeraCodeImport(self.filePath) 
        if self.vendor =='pwndoc-template':
            return PwnDocImport(self.filePath, isTemplate=True) 
        if self.vendor =='nessus':
            return NessusImport(self.filePath)
        else:
            print(f'current Vendor not supported please choose vendor from our supported vendor list: {self.vendor}')
            exit(1)
        


    
        
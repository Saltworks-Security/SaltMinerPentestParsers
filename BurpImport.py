# Copyright (C) Saltworks Security, LLC - All Rights Reserved
# Unauthorized copying of this file, via any medium is strictly prohibited
# Proprietary and confidential
# Written by Saltworks Security, LLC (www.saltworks.io) , 2024

import json
import datetime
import sys 
from dateutil.parser import parse as dtParse
import xmltodict
from bs4 import BeautifulSoup


class BurpImport:
    def __init__(self, filePath):
        self.filePath = filePath
        splitFileName = self.filePath.rsplit('/', -1)
        self.finalFileName = splitFileName[-1].rsplit('.')
        
        
        self.issueImportDocs = []

    def issueImport(self):
       self.formatFile()
       loadedBurpJson= json.loads(self.fileJson)
       
       burpVersion = loadedBurpJson['issues']['@burpVersion']
       
       for issue in loadedBurpJson['issues']['issue']:
           
            if 'host' in issue:
                host = issue['host']['#text']
                
                if host == '':
                    host = None
            else:
                host = None
            if issue['path'] =='/sendFeedback':
                path = '/'
            else:
                path = issue['path']
            
            portfinder = host.rsplit(':', 1)
            if not portfinder[1].startswith('//'):
                port = int(portfinder[1])
            else:
                if host and host.startswith('http:'):
                    port = 80
                if host and host.startswith('https:'):
                    port = 443
            if 'requestresponse' in issue:
                try:
                    requestResponse = issue['requestresponse']
                    requestSoup = BeautifulSoup(requestResponse['request']['#text'], 'html5lib')
                    responseSoup = BeautifulSoup(requestResponse['response']['#text'], 'html5lib')
                    if bool(responseSoup.find()):
                        issueResponse = responseSoup.get_text()
                    else:
                        issueResponse = requestResponse['response']['#text']
                    if bool(requestSoup.find()):
                        issueRequest = requestSoup.get_text()
                    else:
                        issueRequest = requestResponse['request']['#text']
                    proofString = f'Request:\n{issueRequest}\n Response:\n{issueResponse}'
                except TypeError:
                    issueProof = []
                    for response in issue['requestresponse']:
                        responseSoup= BeautifulSoup(response['response']['#text'], 'html5lib')
                        requestSoup = BeautifulSoup(response['request']['#text'], 'html5lib')
                        issueProof.append(f'Request:\n{requestSoup.get_text()}\nResponse:\n{responseSoup.get_text()}')
                    proofString = '\n'.join(issueProof)
            else:
                proofString = None
            if 'references' in issue:
                referenceSoup = BeautifulSoup(issue['references'], 'html5lib')
                reference = []
                for a in referenceSoup.findAll('a', href=True):
                    reference.append(a['href'])
            else:
                reference = None
            if reference:
                referenceString = ', '.join(reference)
            else: 
                referenceString = None
            if 'remediationBackground' in issue:
                remediation = BeautifulSoup(issue['remediationBackground'], 'html5lib').get_text()
            else:
                remediation= None
            if 'issueDetail' in issue:
                details = BeautifulSoup(issue['issueDetail'], 'html5lib').get_text()
            else:
                details = None
            if 'issueBackground' in issue:
                implication = BeautifulSoup(issue['issueBackground'], 'html5lib').get_text()
            else:
                implication = None
            foundDate = dtParse(loadedBurpJson['issues']['@exportTime']).strftime("%Y-%m-%dT%I:%M:%S.000000")

            if issue['severity'] =="Information":
                severity = 'Info'
            else:
                severity = issue['severity']

            SMissueTemplate= {
                     "issue": {
                         "name": issue['name'],
                         "severity": severity,
                         "foundDate": foundDate,
                         "testStatus": "Found",
                         "isSuppressed": False,
                         "isFiltered": False,
                         "removedDate": None,
                         "location": host,
                         "locationFull": f"{host}{path}",
                         "reportId": f"{self.finalFileName[0]}{foundDate}",
                         "category": None,
                         "classification": None,
                         "description": None,
                         "audited": False,
                         "auditor": None,
                         "lastAudit": None,
                         "enumeration": None,
                         "proof": proofString,
                         "testingInstructions": None,
                         "details": details,
                         "implication": implication,
                         "recommendation": remediation,
                         "references": referenceString,
                         "reference": None,
                         "vendor": "Burp",
                         "product": f"Burp {burpVersion}",
                         "base": 0,
                         "environmental": 0,
                         "temporal": 0,
                         "scoreVersion": None,
                         "attributes": None,
 
                     },
                     "asset": {
                         "name": host,
                         "description": host,
                         "versionId": f"{self.finalFileName[0]}{foundDate}",
                         "version": f"{self.finalFileName[0]}{foundDate}",
                         "host": host,
                         "ip": issue['host']['@ip'],
                         "schema": None,
                         "port": port,
                         "sourceId": None,
                         "attributes": None
                     }
 
                 }
            
            self.appendIssue(template=SMissueTemplate)
            reference = []
            issueProof=[]
       return self.issueImportDocs
    
    def formatFile(self):
        with open(self.filePath, 'r') as file:
            data = file.read()
            fileDict =xmltodict.parse(data)
            self.fileJson = json.dumps(fileDict, indent=2)

    def appendIssue(self, template):
        self.issueImportDocs.append(template)
        
# Copyright (C) Saltworks Security, LLC - All Rights Reserved
# Unauthorized copying of this file, via any medium is strictly prohibited
# Proprietary and confidential
# Written by Saltworks Security, LLC (www.saltworks.io) , 2024

import json
import datetime
import sys 
import io
import re
from dateutil.parser import parse as dtParse
import xmltodict
from bs4 import BeautifulSoup




class VeraCodeImport:
    def __init__(self, filePath):
        self.filePath = filePath
        splitFileName = self.filePath.rsplit('/', -1)
        self.finalFileName = splitFileName[-1].rsplit('.')
        self.issueImportDocs = []
        self.severityTypes = {"0":"Info","1":"Low", "2":"Low", "3":"Medium", "4":"High","5":"Critical"}
    

    def issueImport(self):

        self.formatFile()
        issueDict = {}
        loadedVeraJson = json.loads(self.fileJson)
        report = loadedVeraJson['detailedreport']
        issueDict['asset_Id'] = report['@app_id']
        issueDict['asset_Name'] = report['@app_name']
        issueDict['report_Id'] = report['@analysis_id']
        if report['static-analysis']: 
            self.SASTImport(report=report, issueDict=issueDict)
        if report['software_composition_analysis']:
            self.SCAImport(report=report, issueDict=issueDict)
        
        return self.issueImportDocs

    def SCAImport(self, report, issueDict):

        SCA = report['software_composition_analysis']
        issueDict['location']= report['static-analysis']['modules']['module']['@name']
        issueDict['issueCategory']= None
        issueDict['vendor'] = 'Veracode-Software Composition Analysis'
        for component in SCA['vulnerable_components']['component']:
            if type(component['file_paths']) == dict:
                issueDict['locationFull']= component['file_paths']['file_path']['@value']
            if type(component['file_paths']) == list:
                issueDict['locationFull']= component['file_paths'][0]['file_path']['@value']
                issueDict['asset_description'] = f"{issueDict['asset_description']}, Path: {path['file_path']['@value']}"
                for path in component['file_paths']:
                    issueDict['asset_description'] = f"{issueDict['asset_description']}, Path: {path['file_path']['@value']}"
            #if component['@vulnerabilities'] == '0':
            issueDict['severity']= 'Info'
            issueDict['issueName'] = component['@file_name']
            issueDict['foundDate']= dtParse(component['@added_date']).strftime("%Y-%m-%dT%I:%M:%S.000000")
            issueDict['isSuppressed'] = False
            issueDict['proof'] = f'Veracode SCA shows that you use the following library: {component["@library"]}'
            
            # else:
            #     #ADD LOGIC FOR SCA VULNS HERE 
            #     pass

            self.createIssue(issueDict=issueDict)

    def SASTImport(self, report, issueDict):

        issueDict['location'] = report['static-analysis']['modules']['module']['@name']
        issueDict['asset_Description'] = f"Location: {issueDict['location']}, OS: {report['static-analysis']['modules']['module']['@os']}, Architecture: {report['static-analysis']['modules']['module']['@architecture']}"
        issueDict['isSuppressed']= False
        issueDict['removedDate'] = None
        issueDict['product'] = 'VeraCode-SAST'

        for severityLevel in report['severity']:
            if len(severityLevel) > 1:
                issueDict['severity'] = self.severityTypes[severityLevel['@level']]
                if type(severityLevel['category']) == list:
                    for category in severityLevel['category']: 
                        issueDict['issueCategory'] = [category['@categoryname'], category['cwe']['@cwename']]
                        flaws = category['cwe']['staticflaws']['flaw']
                        assetTemplateDict = issueDict.copy()
                        if type(flaws) == dict:
                            self.createIssue(self.extractSASTValues(issueData=flaws, assetTemplate=assetTemplateDict))
                
                        elif type(flaws) == list:
                            for issue in flaws:
                                self.createIssue(self.extractSASTValues(issueData=issue, assetTemplate=assetTemplateDict))
                                
                elif type(severityLevel['category']) == dict:
                    issueDict['issueCategory'] = [severityLevel['category']['@categoryname'], severityLevel['category']['cwe']['@cwename']]
                    flaws = severityLevel['category']['cwe']['staticflaws']['flaw']
                    assetTemplateDict = issueDict.copy()

                    if type(flaws) == dict:
                        self.createIssue(self.extractSASTValues(issueData=flaws, assetTemplate=assetTemplateDict))

                    elif type(flaws) == list:
                        for issue in flaws:
                            self.createIssue(self.extractSASTValues(issueData=issue, assetTemplate=assetTemplateDict))
        
        

    


    def extractSASTValues(self, issueData, assetTemplate):

        issueDict = assetTemplate
        issueDict['product'] = 'VeraCode-SAST'
        issueDict['issueName'] = issueData['@categoryname']
        issueDict['locationFull'] = issueData['@module']
        issueDict['proof'] = issueData['@description']
        issueDict['foundDate'] = dtParse(issueData['@date_first_occurrence']).strftime("%Y-%m-%dT%I:%M:%S.000000")
        if issueData['@remediation_status'] == 'Mitigated':
            issueDict['isSuppressed'] = True
            mitigationsList = {item['@action']:item['@date'] for item in issueData['mitigations']['mitigation']}
            issueDict['removedDate'] = dtParse(mitigationsList['Approve Mitigation']).strftime("%Y-%m-%dT%I:%M:%S.000000")

        return issueDict
    
    def createIssue(self, issueDict):
        
        SMissueTemplate= {
                     "issue": {
                         "name": issueDict['issueName'],
                         "severity": issueDict['severity'],
                         "foundDate": issueDict['foundDate'],
                         "testStatus": "Found",
                         "isSuppressed": issueDict['isSuppressed'],
                         "isFiltered": False,
                         "removedDate": None,
                         "location": issueDict['location'],
                         "locationFull": issueDict['locationFull'],
                         "reportId": issueDict['report_Id'],
                         "category": issueDict['issueCategory'],
                         "classification": None,
                         "description": None,
                         "audited": False,
                         "auditor": None,
                         "lastAudit": None,
                         "enumeration": None,
                         "proof": issueDict['proof'],
                         "testingInstructions": None,
                         "details": None,
                         "implication": None,
                         "recommendation": None,
                         "references": None,
                         "reference": None,
                         "vendor": "Veracode",
                         "product":issueDict['product'],
                         "base": 0,
                         "environmental": 0,
                         "temporal": 0,
                         "scoreVersion": None,
                         "attributes": None,
 
                     },
                     "asset": {
                         "name": issueDict['asset_Name'],
                         "description": issueDict['asset_Description'],
                         "versionId": issueDict['asset_Id'],
                         "version": issueDict['asset_Name'],
                         "host": None,
                         "ip": None,
                         "schema": None,
                         "port": 0,
                         "sourceId": None,
                         "attributes": None
                     }
 
                 }
        
        self.appendIssue(SMissueTemplate)

    def formatFile(self):

        with open(self.filePath, 'r') as file:
            data = file.read()
            fileDict =xmltodict.parse(data)
            self.fileJson = json.dumps(fileDict, indent=2)

    def appendIssue(self, template):

        self.issueImportDocs.append(template)    
# Copyright (C) Saltworks Security, LLC - All Rights Reserved
# Unauthorized copying of this file, via any medium is strictly prohibited
# Proprietary and confidential
# Written by Saltworks Security, LLC (www.saltworks.io) , 2024

import json
import datetime
import sys 
import io
import re
from dateutil.parser import parse as dtParse
import xmltodict
from bs4 import BeautifulSoup

class NmapImport:
    def __init__(self, filePath) -> None:
        self.filePath = filePath
        splitFileName = self.filePath.rsplit('/', -1)
        self.finalFileName = splitFileName[-1].rsplit('.')
        self.issueImportDocs = []

        self.formatFile()
        

        # with open('test2.json', 'w') as file:
        #     file.write(self.fileJson)

    def issueImport(self):
        self.getProofs()
        self.getHosts()

        for ip in self.reportProofs:
            portStr = str(self.hosts[ip]['ports'])
            implication = ''
            for item in self.hosts[ip]['ports']:
                implication += f'Port:{item["port"]} {item["service"]} {item["state"]} ,'
            smTemplate = {
                     "issue": {
                         "name": 'Target',
                         "severity": 'Info',
                         "foundDate": self.foundDate,
                         "testStatus": "Found",
                         "isSuppressed": False,
                         "isFiltered": False,
                         "removedDate": None,
                         "location": self.hosts[ip]['hostname'],
                         "locationFull": self.hosts[ip]['hostname'],
                         "reportId": f"{self.finalFileName[0]}{self.foundDate}",
                         "category": None,
                         "classification": None,
                         "description": None,
                         "audited": False,
                         "auditor": None,
                         "lastAudit": None,
                         "enumeration": None,
                         "proof": self.reportProofs[ip],
                         "testingInstructions": None,
                         "details": None,
                         "implication": implication,
                         "recommendation": None,
                         "references": None,
                         "reference": None,
                         "vendor": "Nmap",
                         "product": f"Nmap {self.version}",
                         "base": 0,
                         "environmental": 0,
                         "temporal": 0,
                         "scoreVersion": None,
                         "attributes": None,
 
                     },
                     "asset": {
                         "name": self.hosts[ip]['hostname'],
                         "description":self.hosts[ip]['hostname'],
                         "versionId": None,
                         "version": None,
                         "host": self.hosts[ip]['hostname'],
                         "ip": ip,
                         "schema": None,
                         "port": int(self.hosts[ip]['ports'][0]['port']),
                         "sourceId": None,
                         "attributes": None
                     }
 
                 }
        
            self.appendIssue(smTemplate)
        return self.issueImportDocs
    def getProofs(self):
        self.data = json.loads(self.fileJson)
        ioData = io.StringIO(self.data['nmaprun']['output']['#text'])
        dataLines = ioData.readlines()
        proofText = ''
        self.reportProofs = {}
        hasIP = False
        for line in dataLines:
            if line == dataLines[-1]:
                proofText += f'\n{line}'
                self.reportProofs[currentIP] = proofText
                
            if line.startswith('Nmap scan report'):
                if hasIP:
                    self.reportProofs[currentIP]= proofText
                hasIP = True
                proofText= line
                currentIP= line.split()[-1].strip('()')
                continue
            if hasIP:
                proofText += f'\n{line}'

    def getHosts(self):
        hostData = self.data['nmaprun']['host']
        self.totalStats = self.data['nmaprun']['runstats']['hosts']
        self.version = self.data['nmaprun']['@version']
        self.foundDate = dtParse(self.data['nmaprun']['runstats']['finished']['@timestr']).strftime("%Y-%m-%dT%I:%M:%S.000000")
        if type(hostData) is dict:
            portData = hostData['ports']['port']
            address = hostData['address']['@addr']
            hostDict = {
                address: {
                    'hostname': hostData['hostnames']['hostname']['@name'],
                    'ports': self.getPorts(portData=portData)
            }}
            self.hosts=hostDict

        if type(hostData) is list:
            hostDict = {}
            for host in hostData:
                portData = host['ports']['port']
                address = host['address']['@addr']
                hostDict[address] = {'hostname': host['hostnames']['hostname']['@name'],
                        'ports': self.getPorts(portData=portData)
                }
        self.hosts = hostDict
    
    def getPorts(self, portData):
        ports = []
        if type(portData) is dict:
                template= {
                    'port': portData['@portid'],
                    'state': portData['state']['@state'],
                    'service':portData['service']['@name']
                }
                ports.append(template)
        if type(portData) is list:
            for item in portData:
                template = {
                'port': item['@portid'],
                'state': item['state']['@state'],
                'service':item['service']['@name']
            }
                ports.append(template)
        return ports


    def formatFile(self):
        with open(self.filePath, 'r') as file:
            data = file.read()
            fileDict =xmltodict.parse(data)
            self.fileJson = json.dumps(fileDict, indent=2)

    def appendIssue(self, template):
        self.issueImportDocs.append(template)